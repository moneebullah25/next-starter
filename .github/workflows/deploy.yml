name: 🚀 Deploy

on:
  push:
    branches:
      - staging
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: "Force deployment even if tests fail"
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  pull-requests: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pre-deployment tests
        if: ${{ !github.event.inputs.force_deploy }}
        run: |
          echo "🧪 Running pre-deployment tests..."
          pnpm run lint
          pnpm run type-check
          pnpm run build
          echo "✅ All tests passed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=staging-
            type=raw,value=staging-latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Deploy to staging server
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ steps.meta.outputs.tags }}"
          
          # Create staging environment file
          cat > .env.staging << EOF
          NODE_ENV=production
          PORT=3000
          NEXTJS_EXTERNAL_PORT=3000
          NEXTJS_INTERNAL_PORT=3000
          DEPLOYMENT_ENV=staging
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          EOF

          # Deploy using Docker Compose
          docker-compose -f docker-compose.prod.yml --env-file .env.staging down || true
          docker-compose -f docker-compose.prod.yml --env-file .env.staging pull
          docker-compose -f docker-compose.prod.yml --env-file .env.staging up -d

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for staging deployment to be ready..."
          sleep 30

      - name: Health check
        run: |
          echo "🔍 Running health checks on staging..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            if curl -f http://localhost:3000/api/health; then
              echo "✅ Staging health check passed"
              break
            else
              echo "❌ Health check failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            exit 1
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Successfully deployed to staging"
          echo "🌐 Staging URL: http://localhost:3000"
          echo "📊 Health check: http://localhost:3000/api/health"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **Staging Deployment Successful**\n\n✅ Build completed\n✅ Tests passed\n✅ Docker image built and pushed\n✅ Health checks passed\n\n🌐 **Staging URL:** http://localhost:3000\n📊 **Health Check:** http://localhost:3000/api/health'
            })

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: []

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        if: ${{ !github.event.inputs.force_deploy }}
        run: |
          echo "🧪 Running full test suite for production..."
          pnpm run lint
          pnpm run type-check
          pnpm run build
          echo "✅ All tests passed"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=prod-
            type=raw,value=production-latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Create production backup
        run: |
          echo "💾 Creating production backup..."
          # Backup current production container
          docker tag nextjs-production nextjs-production-backup-$(date +%Y%m%d-%H%M%S) || true

      - name: Deploy to production server
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Image: ${{ steps.meta.outputs.tags }}"
          
          # Create production environment file
          cat > .env.production << EOF
          NODE_ENV=production
          PORT=3000
          NEXTJS_EXTERNAL_PORT=3000
          NEXTJS_INTERNAL_PORT=3000
          DEPLOYMENT_ENV=production
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          GIT_COMMIT=${{ github.sha }}
          GIT_BRANCH=${{ github.ref_name }}
          EOF

          # Deploy using Docker Compose
          docker-compose -f docker-compose.prod.yml --env-file .env.production down || true
          docker-compose -f docker-compose.prod.yml --env-file .env.production pull
          docker-compose -f docker-compose.prod.yml --env-file .env.production up -d

      - name: Wait for deployment
        run: |
          echo "⏳ Waiting for production deployment to be ready..."
          sleep 45

      - name: Health check
        run: |
          echo "🔍 Running health checks on production..."
          max_attempts=15
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            if curl -f http://localhost:3000/api/health; then
              echo "✅ Production health check passed"
              break
            else
              echo "❌ Health check failed, retrying in 15 seconds..."
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Health check failed after $max_attempts attempts"
            echo "🔄 Attempting rollback..."
            docker-compose -f docker-compose.prod.yml --env-file .env.production down
            docker-compose -f docker-compose.prod.yml --env-file .env.production up -d nextjs-production-backup-* || true
            exit 1
          fi

      - name: Cleanup old images
        if: success()
        run: |
          echo "🧹 Cleaning up old Docker images..."
          docker image prune -f
          docker system prune -f

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Successfully deployed to production"
          echo "🌐 Production URL: http://localhost:3000"
          echo "📊 Health check: http://localhost:3000/api/health"

      - name: Create deployment summary
        if: success()
        run: |
          echo "## 🚀 Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time:** $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** http://localhost:3000/api/health" >> $GITHUB_STEP_SUMMARY
