name: üöÄ Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: |
          pnpm run lint
          pnpm run type-check
          pnpm run build

      - name: Build Docker image
        run: |
          echo "NODE_ENV=production" > .env.prod
          echo "NEXTJS_EXTERNAL_PORT=3000" >> .env.prod
          echo "NEXTJS_INTERNAL_PORT=3000" >> .env.prod
          pnpm docker:prod:build

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: docker-compose -f docker-compose.staging.yml up -d
          echo "‚úÖ Staging deployment completed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to staging"

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "pnpm"

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run full test suite
        run: |
          pnpm run lint
          pnpm run type-check
          pnpm run build

      - name: Build production Docker image
        run: |
          echo "NODE_ENV=production" > .env.prod
          echo "NEXTJS_EXTERNAL_PORT=3000" >> .env.prod
          echo "NEXTJS_INTERNAL_PORT=3000" >> .env.prod
          pnpm docker:prod:build

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          # Add your production deployment commands here
          # Example: docker-compose -f docker-compose.prod.yml up -d
          echo "‚úÖ Production deployment completed"

      - name: Health check
        run: |
          echo "üîç Running health checks..."
          # Add health check commands here
          # Example: curl -f https://your-production-url.com/api/health
          echo "‚úÖ Health checks passed"

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Successfully deployed to production"
