name: Repository Setup

on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

run-name: Repository Setup

concurrency:
  group: ${{ github.event.repository.name }}
  cancel-in-progress: true

jobs:
  repository-setup:
    name: Repository Setup
    runs-on: ubuntu-latest
    steps:
      - name: Delete Repository Labels
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = await github.rest.issues.listLabelsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            for (const label of labels.data) {
              await github.rest.issues.deleteLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label.name,
              });
            }

      - name: Create Repository Labels
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const labels = [
              {
                name: 'automated-issue',
                color: '191a1a',
                description: 'Issues created by automated processes',
              },
              {
                name: 'branch-linked',
                color: '668f71',
                description: 'Branch was linked to an issue',
              },
              {
                name: 'urgent',
                color: 'f50000',
              },
              {
                name: 'high',
                color: 'ffcc00',
              },
              {
                name: 'normal',
                color: '6fddff',
              },
              {
                name: 'low',
                color: 'd8d8d8',
              }
            ];

            for (const label of labels) {
              await github.rest.issues.createLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: label.name,
                color: label.color,
                description: label.description,
              });
            }

  package-json-exists:
    name: Does "package.json" Exist?
    runs-on: ubuntu-latest
    outputs:
      package-json-exists: ${{ steps.exists.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check if "package.json" exists
        id: exists
        run: |
          if [ -f package.json ]; then
            echo "result=true" >> "$GITHUB_OUTPUT"
          else
            echo "result=false" >> "$GITHUB_OUTPUT"
          fi
        shell: bash

  update-package-json:
    name: Update "package.json"
    runs-on: ubuntu-latest
    needs: [package-json-exists]
    if: needs.package-json-exists.outputs.package-json-exists == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract repository name
        shell: bash
        id: extract_repo_name
        run: echo "REPO_NAME=$(echo ${GITHUB_REPOSITORY#*/})" >> "$GITHUB_OUTPUT"

      - name: Extract Branch Name
        id: extract_branch
        run: echo "BRANCH=${GITHUB_HED_REF:-${GITHUB_REF#refs/heads/}}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Update "name"
        id: update-name
        run: |
          echo "Updating package.json name attribute"
          sed -i "s/\"name\": \"[^\"]*\"/\"name\": \"${{ steps.extract_repo_name.outputs.REPO_NAME }}\"/g" package.json
        shell: bash

      - name: Reset "version"
        id: reset-version
        run: |
          echo "Resetting package.json version attribute"
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"0.0.0\"/g" package.json
        shell: bash

      - name: Update Dependencies
        id: update-dependencies
        run: |
          echo "Updating package.json dependencies"

          if grep -q '"upgrade":' package.json; then
            npm install npm-check-updates -D
            npm run upgrade
          else
            npm install npm-check-updates -D
            npx ncu -u
            npm install
          fi

        shell: bash

      - name: Commit Changes
        run: |
          if [[ -n $(git status -s) ]]; then
            git checkout ${{ steps.extract_branch.outputs.BRANCH }}

            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"

            git add .

            git commit -m "chore(deps): update package dependencies" -a

            git push --set-upstream origin ${{ steps.extract_branch.outputs.BRANCH }}
          fi
